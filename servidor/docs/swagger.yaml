openapi: 3.0.0
info:
  title: API de Reserva de Vuelos
  version: 1.0.0
  description: Documentación de la API para el sistema de reserva de vuelos.
servers:
  - url: http://localhost:4000
    description: Servidor de Desarrollo
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Asientos
    description: Operaciones relacionadas con los asientos del avión.
  - name: Autenticación
    description: Operaciones de registro e inicio de sesión.
  - name: Reservas
    description: Operaciones para crear y gestionar reservas (Protegido).
  - name: Reportes
    description: Obtener estadísticas y reportes del sistema (Protegido).
  - name: Archivos XML
    description: Carga y descarga masiva de reservas (Protegido).

paths:
  /api/asientos:
    get:
      summary: Obtiene el estado de todos los asientos del avión.
      tags: [Asientos]
      responses:
        '200':
          description: Una lista de todos los asientos con su estado (disponible u ocupado).
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    asiento_id:
                      type: integer
                      description: El ID único del asiento.
                      example: 1
                    numero_asiento:
                      type: string
                      description: El código del asiento (ej. 'A1', 'I7').
                      example: 'I1'
                    clase:
                      type: string
                      description: Clase del asiento.
                      enum: [Negocios, Económica]
                      example: 'Negocios'
                    precio:
                      type: number
                      description: El precio base del asiento.
                      example: 2500.00
                    estado:
                      type: string
                      description: Estado actual del asiento.
                      enum: [disponible, ocupado]
                      example: 'disponible'
        '500':
          description: Error interno del servidor.
  /api/auth/registro:
    post:
      summary: Registra un nuevo usuario (agente) en el sistema.
      tags: [Autenticación]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [correo_electronico, contrasena]
              properties:
                correo_electronico:
                  type: string
                  format: email
                  description: Email del usuario (solo @gmail.com o @outlook.com).
                  example: 'agente@gmail.com'
                contrasena:
                  type: string
                  format: password
                  description: Contraseña (mínimo 6 caracteres).
                  example: 'password123'
      responses:
        '201':
          description: Usuario registrado exitosamente.
        '400':
          description: Error de validación (email ya existe, dominio incorrecto, etc.).
        '500':
          description: Error interno del servidor.
          
  /api/auth/login:
    post:
      summary: Inicia sesión y obtiene un token JWT.
      tags: [Autenticación]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [correo_electronico, contrasena]
              properties:
                correo_electronico:
                  type: string
                  format: email
                  example: 'agente@gmail.com'
                contrasena:
                  type: string
                  format: password
                  example: 'password123'
      responses:
        '200':
          description: Inicio de sesión exitoso. Devuelve un token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIuzI1NiIsInR5cCI6...'
        '401':
          description: Credenciales incorrectas.
        '500':
          description: Error interno del servidor.
  /api/reservas:
    post:
      summary: Crea una nueva reserva (Manual).
      tags: [Reservas]
      # --- 4. AÑADE ESTO PARA INDICAR QUE ES UNA RUTA PROTEGIDA ---
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [asiento_id, nombre_pasajero, cui, con_equipaje]
              properties:
                asiento_id:
                  type: integer
                  description: El ID del asiento (de la tabla Asientos).
                  example: 15
                nombre_pasajero:
                  type: string
                  example: 'Patricia Perez'
                cui:
                  type: string
                  description: CUI de 13 dígitos del pasajero.
                  example: '1265455890306'
                con_equipaje:
                  type: boolean
                  description: True si el pasajero lleva equipaje.
                  example: true
      responses:
        '201':
          description: Reserva creada exitosamente.
        '400':
          description: Error de validación (CUI inválido, asiento ocupado, etc.).
        '401':
          description: No autorizado (Token no válido o expirado).
        '500':
          description: Error interno del servidor.
    patch:
      summary: Modifica una reserva existente (cambio de asiento).
      tags: [Reservas]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [cui, numero_asiento_actual, numero_asiento_nuevo]
              properties:
                cui:
                  type: string
                  description: CUI del pasajero (debe coincidir).
                  example: '1265455890306'
                numero_asiento_actual:
                  type: string
                  description: El código del asiento actual (ej. 'I3').
                  example: 'I3'
                numero_asiento_nuevo:
                  type: string
                  description: El código del nuevo asiento (ej. 'I5').
                  example: 'I5'
      responses:
        '200':
          description: Reserva modificada exitosamente.
        '400':
          description: Error (asientos no coinciden, nuevo asiento ocupado, misma clase, etc.).
        '401':
          description: No autorizado (Token no válido).
    delete:
      summary: Cancela una reserva existente.
      tags: [Reservas]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [cui, numero_asiento]
              properties:
                cui:
                  type: string
                  description: CUI del pasajero (debe coincidir).
                  example: '1265455890306'
                numero_asiento:
                  type: string
                  description: El código del asiento a cancelar (ej. 'I5').
                  example: 'I5'
      responses:
        '200':
          description: Reserva cancelada exitosamente.
        '400':
          description: Error (los datos no coinciden).
        '401':
          description: No autorizado (Token no válido).
  /api/reportes:
    get:
      summary: Obtiene un resumen de estadísticas del sistema.
      tags: [Reportes]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Objeto con todas las estadísticas.
        '401':
          description: No autorizado.
  /api/archivos/descargar-xml:
    get:
      summary: Descarga un archivo XML con todas las reservas. 
      tags: [Archivos XML]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Un archivo XML.
          content:
            application/xml:
              schema:
                type: string
                format: binary
        '401':
          description: No autorizado.
  /api/archivos/cargar-xml:
    post:
      summary: Carga un archivo XML para procesar reservas masivas. 
      tags: [Archivos XML]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                archivo: # Este 'archivo' debe coincidir con upload.single('archivo')
                  type: string
                  format: binary
                  description: El archivo .xml a procesar.
      responses:
        '200':
          description: Resumen de la carga. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  asientos_cargados_exito:
                    type: integer
                  asientos_con_error:
                    type: integer
                  tiempo_procesamiento_ms:
                    type: number
        '400':
          description: No se subió archivo o el formato es inválido.
        '401':
          description: No autorizado.